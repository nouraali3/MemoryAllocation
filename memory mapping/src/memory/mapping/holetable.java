/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memory.mapping;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;

/**
 *
 * @author user
 */
public class holetable extends javax.swing.JDialog {

    /**
     * Creates new form guitables
     */
    public holetable() {
        initComponents();
        JTableHeader th=mstbl.getTableHeader();
        th.setFont(new Font("Tahome",Font.BOLD,13));
        th.setBackground(Color.getHSBColor(145,234,235));
        allocbtn.setEnabled(false);
        deallocbtn.setEnabled(false);
        ffitbtn.setEnabled(false);
        bfitbtn.setEnabled(false);
        wfitbtn.setEnabled(false);
        phtbl.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        gbtn = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        mstbl = new javax.swing.JTable();
        resetbtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        hsizetxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        hstarttxt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        ffitbtn = new javax.swing.JRadioButton();
        bfitbtn = new javax.swing.JRadioButton();
        wfitbtn = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        allocbtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        psizetxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        pnametxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        statuslbl = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        dealloctxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        deallocbtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        statuslbl1 = new javax.swing.JLabel();
        showbtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        phtbl = new javax.swing.JTable();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Memory Allocation");
        setBackground(new java.awt.Color(250, 226, 226));

        mstbl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mstbl.setFont(new java.awt.Font("Eras Light ITC", 0, 12)); // NOI18N
        mstbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "H/P", "start address", "end address", "size (KB)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mstbl.setRowHeight(25);
        mstbl.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                mstblComponentAdded(evt);
            }
        });
        mstbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mstblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mstbl);
        if (mstbl.getColumnModel().getColumnCount() > 0) {
            mstbl.getColumnModel().getColumn(0).setPreferredWidth(5);
            mstbl.getColumnModel().getColumn(3).setPreferredWidth(15);
        }

        resetbtn.setBackground(new java.awt.Color(255, 204, 204));
        resetbtn.setForeground(new java.awt.Color(102, 0, 0));
        resetbtn.setText("reset");
        resetbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Holes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 12), new java.awt.Color(102, 0, 0))); // NOI18N

        hsizetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hsizetxtKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("size of hole (KB)");

        addbtn.setBackground(new java.awt.Color(255, 204, 204));
        addbtn.setForeground(new java.awt.Color(153, 0, 51));
        addbtn.setText("add");
        addbtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("starting address");

        hstarttxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hstarttxtKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(hstarttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(hsizetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hstarttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hsizetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Allocation Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 12), new java.awt.Color(102, 0, 0))); // NOI18N

        gbtn.add(ffitbtn);
        ffitbtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ffitbtn.setText("first fit");

        gbtn.add(bfitbtn);
        bfitbtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bfitbtn.setText("best fit");

        gbtn.add(wfitbtn);
        wfitbtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        wfitbtn.setText("worst fit");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(ffitbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bfitbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wfitbtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ffitbtn)
                    .addComponent(bfitbtn)
                    .addComponent(wfitbtn))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Allocation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 12), new java.awt.Color(102, 0, 0))); // NOI18N

        allocbtn.setBackground(new java.awt.Color(255, 204, 204));
        allocbtn.setForeground(new java.awt.Color(102, 0, 0));
        allocbtn.setText("allocate");
        allocbtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        allocbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocbtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("process size (KB)");

        psizetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psizetxtActionPerformed(evt);
            }
        });
        psizetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                psizetxtKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("process name");

        pnametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnametxtKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel9.setText("status");

        statuslbl.setFont(new java.awt.Font("Shruti", 3, 14)); // NOI18N
        statuslbl.setForeground(new java.awt.Color(137, 10, 10));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(allocbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(pnametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(psizetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(statuslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pnametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(psizetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allocbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(statuslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Deallocation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 12), new java.awt.Color(102, 0, 0))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("process name");

        deallocbtn.setBackground(new java.awt.Color(255, 204, 204));
        deallocbtn.setForeground(new java.awt.Color(102, 0, 0));
        deallocbtn.setText("deallocate");
        deallocbtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deallocbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deallocbtnActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel10.setText("status");

        statuslbl1.setFont(new java.awt.Font("Shruti", 3, 14)); // NOI18N
        statuslbl1.setForeground(new java.awt.Color(137, 10, 10));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(statuslbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(dealloctxt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(deallocbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel3)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dealloctxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deallocbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statuslbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        showbtn.setBackground(new java.awt.Color(255, 204, 204));
        showbtn.setForeground(new java.awt.Color(102, 0, 0));
        showbtn.setText("Show memory");
        showbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        showbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showbtnActionPerformed(evt);
            }
        });

        phtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(phtbl);
        if (phtbl.getColumnModel().getColumnCount() > 0) {
            phtbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resetbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(showbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(93, 93, 93)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mstblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mstblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mstblMouseClicked
    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
       
       String holestart=hstarttxt.getText(); 
       String holesize=hsizetxt.getText();
       int hstart=Integer.parseInt(holestart);  //parsing start address
       int hsize=Integer.parseInt(holesize);   //parsing hole size
       int hend=hstart+hsize;              //calculating end
      
       DefaultTableModel model = (DefaultTableModel) mstbl.getModel();
       if(mstbl.getRowCount()!=0 && hstart==(int)mstbl.getValueAt(mstbl.getRowCount()-1,2)) //check if the inserted hole is right after the previous one so merge them
       {
           model.setValueAt(hend, mstbl.getRowCount()-1, 2); //update end address
           model.setValueAt(hsize+(int)mstbl.getValueAt(mstbl.getRowCount()-1,3), mstbl.getRowCount()-1, 3); //update the size of hole
       }
       else
           model.addRow(new Object[]{"H",hstart,hend,hsize});   //inserting a new hole row to table
      
       hstarttxt.setText("");
       hsizetxt.setText("");       
       
       allocbtn.setEnabled(true);
       deallocbtn.setEnabled(true);
       ffitbtn.setEnabled(true);
       bfitbtn.setEnabled(true);
       wfitbtn.setEnabled(true);
       SortStartingAddressAscendingly(mstbl);
    }//GEN-LAST:event_addbtnActionPerformed
    private void updateRowHeight() {

    /* 
     * Auto adjust the height of rows in a JTable.
     * The only way to know the row height for sure is to render each cell 
     * to determine the rendered height. After your table is populated with 
     * data you can do:         
     *  
     */        
    for (int row = 0; row < phtbl.getRowCount(); row++) {
        int rowHeight = phtbl.getRowHeight();
        for (int column = 0; column < phtbl.getColumnCount(); column++)
        {
            Component comp = phtbl.prepareRenderer(phtbl.getCellRenderer(row, column), row, column);
            rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
        }
        phtbl.setRowHeight(row, rowHeight);
    }
}
    
    public void RemoveRows(DefaultTableModel model)
    {
        for(int i=model.getRowCount()-1;i>=0;i--)
        {
            model.removeRow(i);
        }
    }
   
    private void allocate(DefaultTableModel newdtm,String pname,int psize,int i)
    {
        int pstart=(int)newdtm.getValueAt(i, 1);  int pend=pstart+psize;
        int hstart=pend;  int hend=(int)newdtm.getValueAt(i, 2) ;  int newhsize=(int)newdtm.getValueAt(i,3)-psize;
        //updating hole 
        //(1) by setting process info
        newdtm.setValueAt(pname , i, 0);
        newdtm.setValueAt(pstart, i, 1);
        newdtm.setValueAt(pend  , i, 2);
        newdtm.setValueAt(psize , i, 3);
        //(2) adding rest of the hole if new size of hole!=0
        if(newhsize!=0)
        {
            newdtm.insertRow(i+1,new Object[]{"H",hstart,hend,newhsize});
        }
    }
  
    public void SortAccordingToHoleSizeAscendingly(JTable jTable1)
    {
          int max=jTable1.getRowCount();
          DefaultTableModel model1=(DefaultTableModel) jTable1.getModel();
          jTable1.setAutoCreateRowSorter(true);
          int temp;  int temp1;  int temp2; String temp3;
          for(int m=0;m<max;m++)
          {
            for(int n=0; n < (max-1); n++)
            { 
              String currentname= model1.getValueAt(n, 0).toString() ;
              int cs=Integer.parseInt(model1.getValueAt(n, 1).toString()) ;
              int ce= Integer.parseInt(model1.getValueAt(n, 2).toString()) ;
              int ns=Integer.parseInt(model1.getValueAt(n+1, 1).toString()) ;
              
              String nextname= model1.getValueAt((n+1), 0).toString();
              int csize= Integer.parseInt(model1.getValueAt(n, 3).toString()) ;
              int ne=Integer.parseInt( model1.getValueAt((n+1), 2).toString());
              int nsize=Integer.parseInt( model1.getValueAt((n+1), 3).toString());

              if( csize > nsize)
              {  
                  //swap sizes  
                  temp=csize;
                  csize=nsize;
                  nsize=temp;
                  //swap start address
                  temp1=cs;
                  cs=ns;
                  ns=temp1;
                  //swap end address
                  temp2=ce;
                  ce=ne;
                  ne=temp2;

                  //swap names
                  temp3=currentname;
                  currentname=nextname;
                  nextname=temp3;
                  
                  model1.setValueAt(currentname, n, 0);
                  model1.setValueAt(cs, n, 1);
                  model1.setValueAt(ce, n, 2);
                  model1.setValueAt(csize, n, 3);
                  
                  model1.setValueAt(nextname, n+1, 0);
                  model1.setValueAt(ns, n+1, 1);
                  model1.setValueAt(ne, n+1, 2);
                  model1.setValueAt(nsize, n+1, 3);
              }
            }
          }
    }
    
    
     public void SortAccordingToHoleSizeDescendingly(JTable jTable1)
    {
          int max=jTable1.getRowCount();
          DefaultTableModel model1=(DefaultTableModel) jTable1.getModel();
          jTable1.setAutoCreateRowSorter(true);
          int temp;  int temp1;  int temp2; String temp3;
          for(int m=0;m<max;m++)
          {
            for(int n=0; n < (max-1); n++)
            { 
              String currentname= model1.getValueAt(n, 0).toString() ;
              int cs=Integer.parseInt(model1.getValueAt(n, 1).toString()) ;
              int ce= Integer.parseInt(model1.getValueAt(n, 2).toString()) ;
              int ns=Integer.parseInt(model1.getValueAt(n+1, 1).toString()) ;
              
              String nextname= model1.getValueAt((n+1), 0).toString();
              int csize= Integer.parseInt(model1.getValueAt(n, 3).toString()) ;
              int ne=Integer.parseInt( model1.getValueAt((n+1), 2).toString());
              int nsize=Integer.parseInt( model1.getValueAt((n+1), 3).toString());

              if( csize < nsize)
              {  
                  //swap sizes  
                  temp=csize;
                  csize=nsize;
                  nsize=temp;
                  //swap start address
                  temp1=cs;
                  cs=ns;
                  ns=temp1;
                  //swap end address
                  temp2=ce;
                  ce=ne;
                  ne=temp2;

                  //swap names
                  temp3=currentname;
                  currentname=nextname;
                  nextname=temp3;
                  
                  model1.setValueAt(currentname, n, 0);
                  model1.setValueAt(cs, n, 1);
                  model1.setValueAt(ce, n, 2);
                  model1.setValueAt(csize, n, 3);
                  
                  model1.setValueAt(nextname, n+1, 0);
                  model1.setValueAt(ns, n+1, 1);
                  model1.setValueAt(ne, n+1, 2);
                  model1.setValueAt(nsize, n+1, 3);
              }
            }
          }
    }
    
    public void SortStartingAddressAscendingly(JTable jTable1)
    {
          int max=jTable1.getRowCount();
          DefaultTableModel model1=(DefaultTableModel) jTable1.getModel();
          jTable1.setAutoCreateRowSorter(true);
          int temp;  int temp1;  int temp2; String temp3=new String();
          for(int m=0;m<max;m++){
          
          for(int n=0; n < (max-1); n++)
          { 
            int cs=(int)model1.getValueAt(n, 1) ;
            int ns=(int)model1.getValueAt(n+1, 1) ;
            int ce= (int)model1.getValueAt(n, 2) ;
            int ne=(int) model1.getValueAt((n+1), 2);
            int csize= (int)model1.getValueAt(n, 3) ;
            int nsize=(int) model1.getValueAt((n+1), 3);
            String currentname= model1.getValueAt(n, 0).toString() ;
            String nextname= model1.getValueAt((n+1), 0).toString();
            
            if( cs > ns)//
            {  
                //swap sizes  
                temp=csize;
                csize=nsize;
                nsize=temp;
                //swap start address
                temp1=cs;
                cs=ns;
                ns=temp1;
                //swap end address
                temp2=ce;
                ce=ne;
                ne=temp2;
                //swap names
                temp3=currentname;
                currentname=nextname;
                nextname=temp3;
                
                model1.setValueAt(currentname, n, 0);
                model1.setValueAt(cs, n, 1);
                model1.setValueAt(ce, n, 2);
                model1.setValueAt(csize, n, 3);
               
                model1.setValueAt(nextname, n+1, 0);
                model1.setValueAt(ns, n+1, 1);
                model1.setValueAt(ne, n+1, 2);
                model1.setValueAt(nsize, n+1, 3);
            }
          }
          }
    }

    private void mstblComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_mstblComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_mstblComponentAdded
    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
    hstarttxt.setText("");
    hsizetxt.setText("");
    psizetxt.setText("");
    gbtn.clearSelection();
    pnametxt.setText("");
    psizetxt.setText("");
    dealloctxt.setText("");
    DefaultTableModel dtm=(DefaultTableModel) mstbl.getModel();
    RemoveRows(dtm);   
    }//GEN-LAST:event_resetbtnActionPerformed

    private void deallocbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deallocbtnActionPerformed
    DefaultTableModel dtm= (DefaultTableModel) mstbl.getModel();
    String pname=dealloctxt.getText();
    //getting index of the cell containing this process
    int i=0; boolean found =false;
    while(!found)
    {
        if(pname.equals((String)dtm.getValueAt(i, 0)))
            found =true; 
        else
            i++;
    }
    
    int tablesize=dtm.getRowCount();
    String prevname = new  String(); int prevstart=0; int prevend=0; int prevsize=0;
    String nextname=new String(); int nextstart=0; int nextend=0;  int nextsize=0;  
    
    String currentname=pname;
    int currentstart=(int)dtm.getValueAt(i  , 1);
    int currentend  =(int)dtm.getValueAt(i  , 2);
    int currentsize =(int)dtm.getValueAt(i  , 3);
   
    if(i!=tablesize-1)
    {
        nextname    =(String)dtm.getValueAt(i+1, 0);
        nextstart   =(int)dtm.getValueAt(i+1, 1);
        nextend     =(int)dtm.getValueAt(i+1, 2);
        nextsize    =(int)dtm.getValueAt(i+1, 3);
    }
    
    if(i!=0)
    {
        prevname    =(String)dtm.getValueAt(i-1, 0);
        prevstart   =(int)dtm.getValueAt(i-1, 1);
        prevend     =(int)dtm.getValueAt(i-1, 2);
        prevsize    =(int)dtm.getValueAt(i-1, 3);
    }
    
    
    if(i!=0 && prevname!="H" && nextname!="H") ///if process to be deaalocated is sandwiched bet. two processes
    {
        dtm.setValueAt("H", i, 0);
    }
    
    if(i!=0 && prevname=="H" && nextname=="H"  && currentstart!=prevend && currentend!=nextstart ) ///if process to be deallocated is sandwiched bet. two non contiguous holes
    {
        dtm.setValueAt("H", i, 0);
    }
    
    if(i!=0 && prevname=="H" && nextname=="H"  && currentstart==prevend && currentend==nextstart) ///if process to be deallocated is sandwiched bet. two holes and the 2 holes +process are contiguous
    {
        dtm.setValueAt(nextend,i-1,2);
        dtm.setValueAt(prevsize+currentsize+nextsize,i-1,3);
        dtm.removeRow(i);
    }
    
    if(i!=0 && prevname=="H" && currentstart==prevend) // law ablha hole contiguous
    {
        dtm.setValueAt(currentend,i-1,2);
        dtm.setValueAt(prevsize+currentsize,i-1,3);
        dtm.removeRow(i);
    }
    
    if(i!=tablesize-1 && nextname=="H" && currentend==nextstart) //law ba3dha hole
    {
        dtm.setValueAt(currentstart,i+1,1);
        dtm.setValueAt(nextsize+currentsize,i+1,3);
        dtm.removeRow(i);
    }
    
    statuslbl1.setText("Process deallocated");
    dealloctxt.setText("");
    }//GEN-LAST:event_deallocbtnActionPerformed

    private void hstarttxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hstarttxtKeyTyped
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))
           evt.consume();

    }//GEN-LAST:event_hstarttxtKeyTyped

    private void hsizetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hsizetxtKeyTyped
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))
           evt.consume();        // TODO add your handling code here:
    }//GEN-LAST:event_hsizetxtKeyTyped

    private void pnametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnametxtKeyTyped
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c) || (Character.isAlphabetic(c)) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))
        evt.consume();        // TODO add your handling code here:
    }//GEN-LAST:event_pnametxtKeyTyped

    private void psizetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_psizetxtKeyTyped
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))
        evt.consume();        // TODO add your handling code here:
    }//GEN-LAST:event_psizetxtKeyTyped

    private void psizetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psizetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_psizetxtActionPerformed

    private void allocbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocbtnActionPerformed
        DefaultTableModel tm= (DefaultTableModel) mstbl.getModel();
        String pname=pnametxt.getText();
        String processsize=psizetxt.getText();
        int psize=Integer.parseInt(processsize);

        if (ffitbtn.isSelected())
        {
            int i=0;
            boolean allocated=false;
            l:
            while(i!=tm.getRowCount())
            {
                if(psize <=(int) tm.getValueAt(i, 3) && tm.getValueAt(i, 0)=="H")
                {
                    allocate(tm,pname,psize,i);
                    allocated=true;
                }
                i++;
                if(allocated==true)
                {
                    statuslbl.setText("Process allocated");
                    break;
                }
            }
            // if process isn't allocated then it waits
            if(allocated ==false)
            {
                statuslbl.setText(pname+" is waitng");
            }
            pnametxt.setText("");
            psizetxt.setText("");
        }

        if(bfitbtn.isSelected())
        {
            int i=0;
            boolean allocated=false;

            SortAccordingToHoleSizeAscendingly(mstbl);

            while(i!=tm.getRowCount())
            {
                if(tm.getValueAt(i, 0)=="H" && psize <=(int) tm.getValueAt(i, 3))
                {
                    allocate(tm,pname,psize,i);
                    allocated=true;
                }
                i++;
                if(allocated==true)
                {
                    statuslbl.setText("Process allocated");
                    SortStartingAddressAscendingly(mstbl);
                    break;
                }
            }
            // if process isn't allocated then it waits
            if(allocated ==false)
            {
                statuslbl.setText(pname+"is waitng");
            }
            pnametxt.setText("");
            psizetxt.setText("");
        }

        if(wfitbtn.isSelected())
        {
            int i=0;
            boolean allocated=false;

            SortAccordingToHoleSizeDescendingly(mstbl);
            while(i!=tm.getRowCount())
            {
                if(tm.getValueAt(i, 0)=="H" && psize <=(int) tm.getValueAt(i, 3))
                {
                    allocate(tm,pname,psize,i);
                    allocated=true;
                }
                i++;
                if(allocated==true)
                {
                    statuslbl.setText("Process allocated");
                    SortStartingAddressAscendingly(mstbl);
                    break;
                }
            }
            // if process isn't allocated then it waits
            if(allocated ==false)
            {
                statuslbl.setText(pname+"is waitng");
            }
            pnametxt.setText("");
            psizetxt.setText("");
        }
    }//GEN-LAST:event_allocbtnActionPerformed

    private void showbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showbtnActionPerformed
       phtbl.setVisible(true);
       DefaultTableModel tm=(DefaultTableModel) mstbl.getModel();
       DefaultTableModel tm1=(DefaultTableModel) phtbl.getModel();
       RemoveRows(tm1);
       
       for(int i=0;i<tm.getRowCount();i++)
       {
           String name=(String)tm.getValueAt(i, 0);
           int size=(int)tm.getValueAt(i, 3);
           Object col="<html>"+Integer.toString((int)tm.getValueAt(i, 1))+"<br>"+"<br>"+Integer.toString((int)tm.getValueAt(i, 2))+"</html>";
           System.out.print(col);
           String col1=name+"   "+size+"KB";
           Object[] obj=new Object[]{col,col1};
           tm1.addRow(obj); 
       }
       updateRowHeight();
    }//GEN-LAST:event_showbtnActionPerformed

    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(holetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(holetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(holetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(holetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new holetable().setVisible(true);
                
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JButton allocbtn;
    private javax.swing.JRadioButton bfitbtn;
    private javax.swing.JButton deallocbtn;
    private javax.swing.JTextField dealloctxt;
    private javax.swing.JRadioButton ffitbtn;
    private javax.swing.ButtonGroup gbtn;
    private javax.swing.JTextField hsizetxt;
    private javax.swing.JTextField hstarttxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable mstbl;
    private javax.swing.JTable phtbl;
    private javax.swing.JTextField pnametxt;
    private javax.swing.JTextField psizetxt;
    private javax.swing.JButton resetbtn;
    private javax.swing.JButton showbtn;
    private javax.swing.JLabel statuslbl;
    private javax.swing.JLabel statuslbl1;
    private javax.swing.JRadioButton wfitbtn;
    // End of variables declaration//GEN-END:variables

}
